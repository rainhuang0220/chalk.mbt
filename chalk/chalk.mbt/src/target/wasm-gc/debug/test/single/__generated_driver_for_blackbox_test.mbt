// Generated by moon test.

typealias () -> Unit raise Error
  as Moonbit_Test_Driver_Internal_No_Args_Function

typealias (Moonbit_Test_Driver_Internal_Test_Arg) -> Unit raise Error
  as Moonbit_Test_Driver_Internal_With_Args_Function

typealias async (Moonbit_Test_Driver_Internal_Test_Arg) -> Unit raise
  as Moonbit_Test_Driver_Internal_Async_Function

typealias @moonbitlang/core/builtin.Map[
  String,
  @moonbitlang/core/builtin.Map[
    Int,
    (
      Moonbit_Test_Driver_Internal_No_Args_Function,
      @moonbitlang/core/builtin.Array[String],
    ),
  ],
] as Moonbit_Test_Driver_Internal_No_Args_Map

typealias @moonbitlang/core/builtin.Map[
  String,
  @moonbitlang/core/builtin.Map[
    Int,
    (
      Moonbit_Test_Driver_Internal_With_Args_Function,
      @moonbitlang/core/builtin.Array[String],
    ),
  ],
] as Moonbit_Test_Driver_Internal_TestDriver_With_Args_Map

typealias @moonbitlang/core/builtin.Map[
  String,
  @moonbitlang/core/builtin.Map[
    Int,
    (
      Moonbit_Test_Driver_Internal_Async_Function,
      @moonbitlang/core/builtin.Array[String],
    ),
  ],
] as Moonbit_Test_Driver_Internal_TestDriver_Async_Map

struct Moonbit_Test_Driver_Internal_Meta {
  filename : String
  index : Int
  attrs : @moonbitlang/core/builtin.Array[String]
}

enum Moonbit_Test_Driver_Internal__F {
  F0(Moonbit_Test_Driver_Internal_No_Args_Function)
  F1(Moonbit_Test_Driver_Internal_With_Args_Function)
  F2(Moonbit_Test_Driver_Internal_Async_Function)
}

struct Moonbit_Test_Driver_Internal__TestCase {
  f : Moonbit_Test_Driver_Internal__F
  meta : Moonbit_Test_Driver_Internal_Meta
}

let moonbit_test_driver_internal_no_args_tests : Moonbit_Test_Driver_Internal_No_Args_Map = {
  "chalk_test.mbt": {
    0: (__test_6368616c6b5f746573742e6d6274_0, ["basic colors"]),
    1: (__test_6368616c6b5f746573742e6d6274_1, ["styles"]),
    2: (__test_6368616c6b5f746573742e6d6274_2, ["background colors"]),
    3: (__test_6368616c6b5f746573742e6d6274_3, ["chained styles"]),
    4: (__test_6368616c6b5f746573742e6d6274_4, ["rgb colors"]),
    5: (__test_6368616c6b5f746573742e6d6274_5, ["hex colors"]),
    6: (__test_6368616c6b5f746573742e6d6274_6, ["enable disable"]),
    7: (__test_6368616c6b5f746573742e6d6274_7, ["strip ansi"]),
    8: (__test_6368616c6b5f746573742e6d6274_8, ["visible width"]),
  },
}
let moonbit_test_driver_internal_with_args_tests : Moonbit_Test_Driver_Internal_TestDriver_With_Args_Map = { }  // WILL BE REPLACED
let moonbit_test_driver_internal_async_tests : Moonbit_Test_Driver_Internal_TestDriver_Async_Map = { }  // WILL BE REPLACED

fn moonbit_test_driver_internal_apply_filter(
  no_args_tests : Moonbit_Test_Driver_Internal_No_Args_Map,
  with_args_tests : Moonbit_Test_Driver_Internal_TestDriver_With_Args_Map,
  async_tests : Moonbit_Test_Driver_Internal_TestDriver_Async_Map,
  file_filter : String,
  index_filter : Int
) -> Option[Moonbit_Test_Driver_Internal__TestCase] {
  match no_args_tests.get(file_filter) {
    Some(index_func_map) if index_func_map.get(index_filter) is Some(func_attrs_tuple) => {
      let k = {
        f: Moonbit_Test_Driver_Internal__F::F0(func_attrs_tuple.0),
        meta: { filename: file_filter, index: index_filter, attrs: func_attrs_tuple.1 },
      }
      return Some(k)
    }
    _ => ()
  }

  match with_args_tests.get(file_filter) {
    Some(index_func_map) if index_func_map.get(index_filter) is Some(func_attrs_tuple) => {
      let k = {
        f: Moonbit_Test_Driver_Internal__F::F1(func_attrs_tuple.0),
        meta: { filename: file_filter, index: index_filter, attrs: func_attrs_tuple.1 },
      }
      return Some(k)
    }
    _ => ()
  }

  match async_tests.get(file_filter) {
    Some(index_func_map) if index_func_map.get(index_filter) is Some(func_attrs_tuple) => {
      let k = {
        f: Moonbit_Test_Driver_Internal__F::F2(func_attrs_tuple.0),
        meta: { filename: file_filter, index: index_filter, attrs: func_attrs_tuple.1 },
      }
      return Some(k)
    }
    _ => ()
  }

  None
}

pub fn moonbit_test_driver_internal_do_execute(
  async_ctx : Moonbit_Test_Driver_Internal_Async_Context,
  filename : String,
  index : Int,
) -> Unit {
  let filtered_test = moonbit_test_driver_internal_apply_filter(
    moonbit_test_driver_internal_no_args_tests,
    moonbit_test_driver_internal_with_args_tests,
    moonbit_test_driver_internal_async_tests,
    filename,
    index
  )

  fn handle_result(
    test_name : String,
    file_name : String,
    message : String,
    skipped : Bool,
  ) {
    // In WASM, this function is called by the external test driver, but here
    // in native mode there's nothing that calls it, so we call it manually.
    if not(skipped) && MOONBIT_TEST_DRIVER_INTERNAL_IS_NATIVE {
      
    }
    let file_name = file_name.escape()
    let test_name = test_name.escape()
    let message = message.escape()
    @moonbitlang/core/builtin.println("----- BEGIN MOON TEST RESULT -----")
    @moonbitlang/core/builtin.println(
      "{\"package\": \"moon/test/single\", \"filename\": \{file_name}, \"index\": \"\{index}\", \"test_name\": \{test_name}, \"message\": \{message}}",
    )
    @moonbitlang/core/builtin.println("----- END MOON TEST RESULT -----")
  }

  match filtered_test {
    Some(item) => {
      let attrs = item.meta.attrs
      let file_name = item.meta.filename
      let name = if attrs.is_empty() { "" } else { attrs[0] }
      let name = if name.length() == 0 {
        item.meta.index.to_string()
      } else {
        name
      }

      if MOONBIT_TEST_DRIVER_INTERNAL_IS_NATIVE && attrs.iter().any(fn(attr) -> Bool {
        attr.length() >= 5 && attr[0] == 'p' && attr[1] == 'a' && attr[2] == 'n' && attr[3] == 'i' && attr[4] == 'c'
      }) {
        @moonbitlang/core/builtin.println("skipped test block: \{file_name}: \{attrs[0]}")
        handle_result(name, file_name, "skipped test", true)
        return
      }

      fn on_err(err : Error) {
        match err {
          @moonbitlang/core/builtin.Failure(e) | @moonbitlang/core/builtin.InspectError(e) | @moonbitlang/core/builtin.SnapshotError(e) => {
            handle_result(name, file_name, e, false)
          }
          e => {
            let message = moonbit_test_driver_internal_error_to_string(e)
            handle_result(name, file_name, message, false)
          }
        }
      }

      match item.f {
        Moonbit_Test_Driver_Internal__F::F0(f) => {
          try f() catch {
            err => on_err(err)
          } noraise {
            _ => handle_result(name, file_name, "", false)
          }
        }
        Moonbit_Test_Driver_Internal__F::F1(f) => {
          try f(moonbit_test_driver_internal_new_test_arg(name)) catch {
            err => on_err(err)
          } noraise {
            _ => handle_result(name, file_name, "", false)
          }
        }
        Moonbit_Test_Driver_Internal__F::F2(f) =>
          moonbit_test_driver_internal_run_async_test(
            async_ctx,
            name,
            on_err~,
            fn(arg) {
              try f(arg) catch {
                err => on_err(err)
              } noraise {
                _ => handle_result(name, file_name, "", false)
              }
            },
          )
      }
    }
    _ => handle_result("", "", "skipped test", true)
  }
}

#cfg(target="native")
#test_entry
fn main {
  moonbit_test_driver_internal_run_async_main(fn(ctx) {
    for arg in moonbit_test_driver_internal_native_parse_args() {
      moonbit_test_driver_internal_do_execute(ctx, arg.0, arg.1)
    }
  })
}

#cfg(not(target="native"))
#test_entry
fn main {
  ()
}

#cfg(target="js")
pub fn moonbit_test_driver_internal_execute(filename : String, index : Int) -> Unit {
  moonbit_test_driver_internal_run_async_main(fn(ctx) {
    moonbit_test_driver_internal_do_execute(ctx, filename, index)
  })
}

#cfg(any(target="wasm", target="wasm-gc"))
pub fn moonbit_test_driver_internal_execute(
  filename : MoonbitTestDriverInternalExternString,
  index : Int,
) -> Unit {
  let filename = moonbit_test_driver_internal_get_file_name(filename)
  moonbit_test_driver_internal_run_async_main(fn(ctx) {
    moonbit_test_driver_internal_do_execute(ctx, filename, index)
  })
}

#cfg(not(target="native"))
pub fn moonbit_test_driver_finish() -> Unit {
  
}
typealias Int as  Moonbit_Test_Driver_Internal_Test_Arg

fn moonbit_test_driver_internal_new_test_arg(
  _ : String,
) -> Moonbit_Test_Driver_Internal_Test_Arg {
  42
}
typealias Unit as Moonbit_Test_Driver_Internal_Async_Context 

fn moonbit_test_driver_internal_run_async_test(
  _ctx : Moonbit_Test_Driver_Internal_Async_Context,
  _name : String,
  _f : async (Moonbit_Test_Driver_Internal_Test_Arg) -> Unit raise,
  on_err~ : (Error) -> Unit,
) -> Unit {
  ignore(on_err)
  panic()
}

fn moonbit_test_driver_internal_run_async_main(
  f : (Moonbit_Test_Driver_Internal_Async_Context) -> Unit,
) -> Unit {
  f(())
}
fn moonbit_test_driver_internal_error_to_string(x : Error) -> String = "%error.to_string"

#cfg(not(target="js"))
fn moonbit_unsafe_char_from_int(x : Int) -> Char = "%identity"

#cfg(target="native")
const MOONBIT_TEST_DRIVER_INTERNAL_IS_NATIVE = true

#cfg(not(target="native"))
const MOONBIT_TEST_DRIVER_INTERNAL_IS_NATIVE = false

// =========================================================
// ================== BEGIN WASM SPECIFIC ==================
// =========================================================

#cfg(any(target="wasm", target="wasm-gc"))
fn moonbit_test_driver_internal_get_file_name(file_name : MoonbitTestDriverInternalExternString) -> String {
  moonbit_test_driver_internal_string_from_extern(file_name)
}

#cfg(any(target="wasm", target="wasm-gc"))
#external
type MoonbitTestDriverInternalStringReadHandle

#cfg(any(target="wasm", target="wasm-gc"))
#external
type MoonbitTestDriverInternalExternString

#cfg(any(target="wasm", target="wasm-gc"))
fn moonbit_test_driver_internal_begin_read_string(s : MoonbitTestDriverInternalExternString) -> MoonbitTestDriverInternalStringReadHandle = "__moonbit_fs_unstable" "begin_read_string"

#cfg(any(target="wasm", target="wasm-gc"))
fn moonbit_test_driver_internal_string_read_char(handle : MoonbitTestDriverInternalStringReadHandle) -> Int = "__moonbit_fs_unstable" "string_read_char"

#cfg(any(target="wasm", target="wasm-gc"))
fn moonbit_test_driver_internal_finish_read_string(handle : MoonbitTestDriverInternalStringReadHandle) = "__moonbit_fs_unstable" "finish_read_string"

#cfg(any(target="wasm", target="wasm-gc"))
fn fixedarray_to_bytes(arr : FixedArray[Byte]) -> Bytes = "%identity"

#cfg(any(target="wasm", target="wasm-gc"))
fn moonbit_test_driver_internal_string_from_extern(e : MoonbitTestDriverInternalExternString) -> String {
  let buf = FixedArray::make(512, Byte::default())
  let mut len = 0
  let handle = moonbit_test_driver_internal_begin_read_string(e)
  while true {
    let ch = moonbit_test_driver_internal_string_read_char(handle)
    if ch == -1 {
      break
    } else {
      let written_bytes_len = buf.set_utf16le_char(len, moonbit_unsafe_char_from_int(ch))
      len += written_bytes_len
    }
  }
  moonbit_test_driver_internal_finish_read_string(handle)
  fixedarray_to_bytes(buf).to_unchecked_string(offset = 0, length = len).to_string()
}

// =========================================================
// =================== END WASM SPECIFIC ===================
// =========================================================

// =========================================================
// ================= BEGIN NATIVE SPECIFIC =================
// =========================================================
#cfg(target="native")
fn moonbit_test_driver_internal_native_parse_args() -> Array[(String, Int)] {
  fn moonbit_test_driver_internal_parse_int_(s : String) -> Int {
    let mut res = 0
    let len = s.length()
    for i = 0; i < len; i = i + 1 {
      res = res * 10 + (s[i] - '0')
    }
    res
  }

  fn moonbit_test_driver_internal_utf8_bytes_to_mbt_string(bytes : Bytes) -> String {
    let res = @moonbitlang/core/builtin.StringBuilder::new()
    let len = bytes.length()
    let mut i = 0
    while i < len {
      let mut c = bytes[i].to_int()
      if c < 0x80 {
        res.write_char(moonbit_unsafe_char_from_int(c))
        i += 1
      } else if c < 0xE0 {
        if i + 1 >= len {
          break
        }
        c = ((c & 0x1F) << 6) | (bytes[i + 1].to_int() & 0x3F)
        res.write_char(moonbit_unsafe_char_from_int(c))
        i += 2
      } else if c < 0xF0 {
        if i + 2 >= len {
          break
        }
        c = ((c & 0x0F) << 12) |
          ((bytes[i + 1].to_int() & 0x3F) << 6) |
          (bytes[i + 2].to_int() & 0x3F)
        res.write_char(moonbit_unsafe_char_from_int(c))
        i += 3
      } else {
        if i + 3 >= len {
          break
        }
        c = ((c & 0x07) << 18) |
          ((bytes[i + 1].to_int() & 0x3F) << 12) |
          ((bytes[i + 2].to_int() & 0x3F) << 6) |
          (bytes[i + 3].to_int() & 0x3F)
        c -= 0x10000
        res.write_char(moonbit_unsafe_char_from_int((c >> 10) + 0xD800))
        res.write_char(moonbit_unsafe_char_from_int((c & 0x3FF) + 0xDC00))
        i += 4
      }
    }
    res.to_string()
  }

  fn moonbit_test_driver_internal_get_cli_args_internal() -> @moonbitlang/core/builtin.Array[String] {
    let tmp = moonbit_test_driver_internal_get_cli_args_ffi()
    let res = @moonbitlang/core/builtin.Array::new(capacity=tmp.length())
    for i = 0; i < tmp.length(); i = i + 1 {
      res.push(moonbit_test_driver_internal_utf8_bytes_to_mbt_string(tmp[i]))
    }
    res
  }

  fn moonbit_test_driver_internal_split_mbt_string(s : String, sep : Char) -> @moonbitlang/core/builtin.Array[String] {
    let res = []
    let mut i = 0
    let mut start = 0
    while i < s.length() {
      if moonbit_unsafe_char_from_int(s[i]) == sep {
        res.push(s.unsafe_substring(start = start, end = i))
        start = i + 1
      }
      i += 1
    }
    if start < s.length() {
      res.push(s.unsafe_substring(start = start, end = s.length()))
    }
    res
  }

  let file_and_index = []

  let cli_args = moonbit_test_driver_internal_get_cli_args_internal()
  let test_args = moonbit_test_driver_internal_split_mbt_string(cli_args[1], '/')
  for arg in test_args {
    let file_and_range = moonbit_test_driver_internal_split_mbt_string(arg, ':')
    let file = file_and_range[0]
    let range = file_and_range[1]
    let start_and_end = moonbit_test_driver_internal_split_mbt_string(range, '-')
    let start = moonbit_test_driver_internal_parse_int_(start_and_end[0])
    let end = moonbit_test_driver_internal_parse_int_(start_and_end[1])
    for i = start; i < end; i = i + 1 {
      file_and_index.push((file, i))
    }
  }

  file_and_index
}

#cfg(target="native")
fn moonbit_test_driver_internal_get_cli_args_ffi() -> FixedArray[Bytes] = "$moonbit.get_cli_args"

// =========================================================
// ================== END NATIVE SPECIFIC ==================
// =========================================================
